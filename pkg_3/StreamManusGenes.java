/**	
	Doc
	
    https://data.world/adamhelsinger/a-human-dna-sequence
	https://github.com/msporny/dna
	https://www.snpedia.com/index.php/Eye_color
	
	Illumina OmniExpress Plus Genotyping Beadchip
	chip can read 966,977 SNPs
	
	
	https://pastebin.com/j87YLXGb
	
..

     1 # This data file generated by 23andMe at: Sat Feb 12 07:54:57 2011
     2 #
     3 # Below is a text version of your data. Fields are TAB-separated
     4 # Each line corresponds to a single SNP.  For each SNP, we provide its identifier
     5 # (an rsid or an internal id), its location on the reference human genome, and the
     6 # genotype call oriented with respect to the plus strand on the human reference
     7 # sequence.     We are using reference human assembly build 36.  Note that it is possible
     8 # that data downloaded at different times may be different due to ongoing improvements
     9 # in our ability to call genotypes. More information about these changes can be found at:
    10 # https://www.23andme.com/you/download/revisions/
    11 #
    12 # More information on reference human assembly build 36:
    13 # http://www.ncbi.nlm.nih.gov/projects/mapview/map_search.cgi?taxid=9606&build=36
    14 #
    15 # rsid  chromosome  position    genotype
    16 rs4477212   1   72017   AA
    17 rs3094315   1   742429  AA


..	
	
 */
package pkg_3;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.function.Predicate;
import java.util.stream.Collectors;

/**
 * 
 *
 */
public class StreamManusGenes {

	private final int id;
	
	private static int counter;
	
	StreamManusGenes(){
		id = ++counter;
	}
	
	Predicate<StreamManusGenes.SNP> predicate_rs25531_GG = snp -> { 
				return ( snp.getGenotype().equals("GG") || snp.getGenotype().equals("CC") );
			};
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + id;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) 			return true;
		if (obj == null) 			return false;
		if (getClass() != obj.getClass()) return false;
		StreamManusGenes other = (StreamManusGenes) obj;
		if (id != other.id)
			return false;
		return true;
	}

	/**
	 * Single Nucleotid Polymorphism
	 * */
	final class SNP {
		final String rsid;
		final String chromosome;
		final long position;
		final String genotype;
		SNP(String rsid, String chromosome, long position, String genotype) {
			super();
			this.rsid = rsid;
			this.chromosome = chromosome;
			this.position = position;
			this.genotype = genotype;
		}
		
		/**
		 * @return the rsid
		 */
		String getRsid() {
			return rsid;
		}

		/**
		 * @return the chromosome
		 */
		String getChromosome() {
			return chromosome;
		}

		/**
		 * @return the position
		 */
		long getPosition() {
			return position;
		}

		/**
		 * @return the genotype
		 */
		String getGenotype() {
			return genotype;
		}

		@Override
		public int hashCode() {
			return 31 + rsid.hashCode() + genotype.hashCode();
		}
		@Override
		public boolean equals( Object other ) {
			if (this == other) return true;
			if ( other == null ) return false;
			if ( !(other instanceof StreamManusGenes.SNP) ) return false;
			SNP otherSNP = (SNP)other;
			if ( !this.rsid.equals(otherSNP.rsid)   ) return false;
			if ( !this.genotype.equals(otherSNP.genotype)   ) return false;
			return true;
		}
		@Override
		public String toString() {
			return "SNP [rsid=" + rsid + ", chromosome=" + chromosome + ", position=" + position + ", genotype="
					+ genotype + "]";
		}
	}
	
	Path path = Paths.get("/home/andreas/git/dna");
	
	List<String> lines = new ArrayList<>();
	
	List<SNP> snps = new ArrayList<>();
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		StreamManusGenes smg = new StreamManusGenes();
		smg.loadData(Paths.get("ManuSporny-genome.txt"));
		smg.buildSNPs();
		smg.testSNPList();
		smg.groupSNPsByChromosome();
	}

	private long getMillisFromInstants( Instant start, Instant end ) {
		Duration d = Duration.between(start, end);
		return d.toMillis();
	}	
	
	private void loadData( Path pathFileName ) {
		
		Instant start = Instant.now();
		
		Path fullpath = path.resolve(pathFileName);
		
		if ( !Files.exists(fullpath) ) {
			System.out.println("File ("+fullpath+") dont exist!");
		}
		
		// System.out.println( Files.exists(fullpath) ? "ok" : "nene" );
		
		File file =  fullpath.toFile();
		
		try ( BufferedReader buf = new BufferedReader( new FileReader(file) ); ){
			String line = null;
			while( ( line = buf.readLine() ) != null) {
				lines.add(line);
			}
		}catch( IOException e ) {
			e.printStackTrace();
			return;
		}
		
		Instant end = Instant.now();
		
		// chip can read 966,977 SNPs
		System.out.println("lines read = " + lines.size() + " read in milli secs. = " + this.getMillisFromInstants(start, end));
		
	}

	private void buildSNPs() {
		
		//long timeStmp_Start = LocaldateTime.of
		Instant startInst = Instant.now(); 		
		
		if ( lines.size() == 0 ) {
			System.out.println("No lines available!");
			return;
		}
		
		snps = 
			lines.stream()
			//lines.parallelStream()
			.filter( li -> li.startsWith("#") == false )
			.map( li -> {
				String[] strArr = li.split("\t");
				SNP snp = new SNP(strArr[0], strArr[1], Long.parseLong(strArr[2]), strArr[3]);
				return snp;
			} )
			.collect( ArrayList::new, List::add, List::addAll );
		
		Instant endInst = Instant.now();
		
		Duration durRun = Duration.between(startInst, endInst);
		
		System.out.println("SNPs built = " + snps.size() + " in milli sec. = " + durRun.toMillis());
	}
	
	private void testSNPList() {
		
		Instant startInst = Instant.now(); 	
		boolean b =
		snps.stream()
		//snps.parallelStream()
		.anyMatch(predicate_rs25531_GG);
		
		Instant endInst = Instant.now();
		System.out.println("predicate_rs25531_GG = " + b +  ", in millis secs. = " + getMillisFromInstants( startInst, endInst ) );
	}

	private boolean testForSNP ( Predicate<SNP> pred, SNP snp ) {
		return pred.test(snp);
	}
	
	private void groupSNPsByChromosome() {
		Instant startInst = Instant.now(); 		
		//Map<String,List<SNP>> map =
		Map<String,Set<String>> map =
		//snps.stream()
		snps.parallelStream()
		//.collect( Collectors.groupingBy(SNP::getChromosome) );
		.collect( Collectors.groupingBy(SNP::getChromosome, TreeMap::new, Collectors.mapping(SNP::getRsid, Collectors.toSet())) );
		Instant endInst = Instant.now();
		System.out.println("group by chromosomes took millis secs. = " + this.getMillisFromInstants(startInst, endInst));
		
		Set<String> keySet = map.keySet();
		
		for ( String s : keySet ) {
			System.out.println("SNPs on chromosome " + s + " = " + (map.get(s)).size() );
		}
	}
	
}
